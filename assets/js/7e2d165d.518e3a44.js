"use strict";(self.webpackChunksuiweb_website=self.webpackChunksuiweb_website||[]).push([[645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"hooks",title:"Module: hooks",sidebar_label:"hooks",sidebar_position:0,custom_edit_url:null},o=void 0,l={unversionedId:"api/internal/modules/hooks",id:"api/internal/modules/hooks",title:"Module: hooks",description:"Functions",source:"@site/docs/api/internal/modules/hooks.md",sourceDirName:"api/internal/modules",slug:"/api/internal/modules/hooks",permalink:"/docs/api/internal/modules/hooks",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"hooks",title:"Module: hooks",sidebar_label:"hooks",sidebar_position:0,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"fiber",permalink:"/docs/api/internal/modules/fiber"},next:{title:"render",permalink:"/docs/api/internal/modules/render"}},d={},p=[{value:"Functions",id:"functions",level:2},{value:"prepareToUseHooks",id:"preparetousehooks",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"useEffect",id:"useeffect",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"useState",id:"usestate",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"preparetousehooks"},"prepareToUseHooks"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"prepareToUseHooks"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"memorizedStates"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rerenderFunction"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"This function should be called before a ",(0,r.kt)("inlineCode",{parentName:"p"},"FunctionalFiber")," executes its ",(0,r.kt)("inlineCode",{parentName:"p"},"fiberFunction"),".\nIt will set a reference to the given memorizedStates and the function used to re-render this fiber,\nso those values can then be captured inside the corresponding functions when the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/internal/modules/hooks#usestate"},"useState"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/internal/modules/hooks#useeffect"},"useEffect")," hooks are called in the ",(0,r.kt)("inlineCode",{parentName:"p"},"fiberFunction"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"memorizedStates")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"memorizedStates"),", of the ",(0,r.kt)("inlineCode",{parentName:"td"},"FunctionalFiber")," which this state belongs to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rerenderFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The function which will re-render the fiber which this state belongs to.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/suiweb/suiweb/blob/c061467/suiweb/src/hooks.ts#L13"},"hooks.ts:13")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useeffect"},"useEffect"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useEffect"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"action"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," can be used in a functional component to execute an action,\nafter a component has been rendered. By specifying ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies"),", calling the function\ncan be further restricted, to only call ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," under specific contidtions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Counter = () => {\n    const [count, setCount] = useState(0)\n\n    // `action` is called after every render.\n    useEffect(() => console.log('Counter changed.')) // no dependencies defined\n\n    // `action` is called after every render, if the value of `count`\n    // changed since the last render.\n    useEffect(() => console.log('Counter changed.'), [count]) // specific dependency defined\n\n    // `action` is called only after the first render.\n    useEffect(() => console.log('Counter changed.'), []) // empty array dependency\n\n    return <button onClick={() => setCount(count + 1)}>{`Count: ${count}`}</button>\n}\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The action to execute after rendering the component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"dependencies?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines the dependencies that decide on execution of ",(0,r.kt)("inlineCode",{parentName:"td"},"action"),". ",(0,r.kt)("inlineCode",{parentName:"td"},"action")," will only be called if any of the value in the dependencies has changed since the last render of the component. Pass an empty array (",(0,r.kt)("inlineCode",{parentName:"td"},"[]"),") to only run ",(0,r.kt)("inlineCode",{parentName:"td"},"action")," on the first render. Pass ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," (or leave away the parameter) to run ",(0,r.kt)("inlineCode",{parentName:"td"},"action")," on every render.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/suiweb/suiweb/blob/c061467/suiweb/src/hooks.ts#L91"},"hooks.ts:91")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"usestate"},"useState"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useState"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"initialValue"),"): ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", (",(0,r.kt)("inlineCode",{parentName:"p"},"newValue"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"]"),(0,r.kt)("p",null,"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," can be used inside a functional component to capture\nstate between re-rerenders. State values should never be mutated directly,\nbut always updated via the returned ",(0,r.kt)("inlineCode",{parentName:"p"},"setState")," function (2nd element in the array).\nThis will trigger a re-render of the ",(0,r.kt)("inlineCode",{parentName:"p"},"FunctionalFiber")," and its subtree (children)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Counter = () => {\n    const [count, setCount] = useState(0)\n    return <button onClick={() => setCount(count + 1)}>{`Count: ${count}`}</button>\n}\n")),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial value the state should have.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", (",(0,r.kt)("inlineCode",{parentName:"p"},"newValue"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"]"),(0,r.kt)("p",null,"An array containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," as the first element and\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"setState")," function as the second element."),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/suiweb/suiweb/blob/c061467/suiweb/src/hooks.ts#L37"},"hooks.ts:37")))}u.isMDXComponent=!0}}]);